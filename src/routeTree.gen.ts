/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutFavoritesImport } from './routes/_layout/favorites'
import { Route as LayoutFavoritesFavoriteIdNotesImport } from './routes/_layout/favorites.$favoriteId.notes'

// Create Virtual Routes

const ScannerLazyImport = createFileRoute('/scanner')()
const NotificationsLazyImport = createFileRoute('/notifications')()
const ColorsLazyImport = createFileRoute('/colors')()

// Create/Update Routes

const ScannerLazyRoute = ScannerLazyImport.update({
  id: '/scanner',
  path: '/scanner',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/scanner.lazy').then((d) => d.Route))

const NotificationsLazyRoute = NotificationsLazyImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/notifications.lazy').then((d) => d.Route))

const ColorsLazyRoute = ColorsLazyImport.update({
  id: '/colors',
  path: '/colors',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/colors.lazy').then((d) => d.Route))

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutFavoritesRoute = LayoutFavoritesImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutFavoritesFavoriteIdNotesRoute =
  LayoutFavoritesFavoriteIdNotesImport.update({
    id: '/$favoriteId/notes',
    path: '/$favoriteId/notes',
    getParentRoute: () => LayoutFavoritesRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/colors': {
      id: '/colors'
      path: '/colors'
      fullPath: '/colors'
      preLoaderRoute: typeof ColorsLazyImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsLazyImport
      parentRoute: typeof rootRoute
    }
    '/scanner': {
      id: '/scanner'
      path: '/scanner'
      fullPath: '/scanner'
      preLoaderRoute: typeof ScannerLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout/favorites': {
      id: '/_layout/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof LayoutFavoritesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/favorites/$favoriteId/notes': {
      id: '/_layout/favorites/$favoriteId/notes'
      path: '/$favoriteId/notes'
      fullPath: '/favorites/$favoriteId/notes'
      preLoaderRoute: typeof LayoutFavoritesFavoriteIdNotesImport
      parentRoute: typeof LayoutFavoritesImport
    }
  }
}

// Create and export the route tree

interface LayoutFavoritesRouteChildren {
  LayoutFavoritesFavoriteIdNotesRoute: typeof LayoutFavoritesFavoriteIdNotesRoute
}

const LayoutFavoritesRouteChildren: LayoutFavoritesRouteChildren = {
  LayoutFavoritesFavoriteIdNotesRoute: LayoutFavoritesFavoriteIdNotesRoute,
}

const LayoutFavoritesRouteWithChildren = LayoutFavoritesRoute._addFileChildren(
  LayoutFavoritesRouteChildren,
)

interface LayoutRouteChildren {
  LayoutFavoritesRoute: typeof LayoutFavoritesRouteWithChildren
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutFavoritesRoute: LayoutFavoritesRouteWithChildren,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/colors': typeof ColorsLazyRoute
  '/notifications': typeof NotificationsLazyRoute
  '/scanner': typeof ScannerLazyRoute
  '/favorites': typeof LayoutFavoritesRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/favorites/$favoriteId/notes': typeof LayoutFavoritesFavoriteIdNotesRoute
}

export interface FileRoutesByTo {
  '/colors': typeof ColorsLazyRoute
  '/notifications': typeof NotificationsLazyRoute
  '/scanner': typeof ScannerLazyRoute
  '/favorites': typeof LayoutFavoritesRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/favorites/$favoriteId/notes': typeof LayoutFavoritesFavoriteIdNotesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/colors': typeof ColorsLazyRoute
  '/notifications': typeof NotificationsLazyRoute
  '/scanner': typeof ScannerLazyRoute
  '/_layout/favorites': typeof LayoutFavoritesRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/favorites/$favoriteId/notes': typeof LayoutFavoritesFavoriteIdNotesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/colors'
    | '/notifications'
    | '/scanner'
    | '/favorites'
    | '/'
    | '/favorites/$favoriteId/notes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/colors'
    | '/notifications'
    | '/scanner'
    | '/favorites'
    | '/'
    | '/favorites/$favoriteId/notes'
  id:
    | '__root__'
    | '/_layout'
    | '/colors'
    | '/notifications'
    | '/scanner'
    | '/_layout/favorites'
    | '/_layout/'
    | '/_layout/favorites/$favoriteId/notes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  ColorsLazyRoute: typeof ColorsLazyRoute
  NotificationsLazyRoute: typeof NotificationsLazyRoute
  ScannerLazyRoute: typeof ScannerLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  ColorsLazyRoute: ColorsLazyRoute,
  NotificationsLazyRoute: NotificationsLazyRoute,
  ScannerLazyRoute: ScannerLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/colors",
        "/notifications",
        "/scanner"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/favorites",
        "/_layout/"
      ]
    },
    "/colors": {
      "filePath": "colors.lazy.tsx"
    },
    "/notifications": {
      "filePath": "notifications.lazy.tsx"
    },
    "/scanner": {
      "filePath": "scanner.lazy.tsx"
    },
    "/_layout/favorites": {
      "filePath": "_layout/favorites.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/favorites/$favoriteId/notes"
      ]
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/favorites/$favoriteId/notes": {
      "filePath": "_layout/favorites.$favoriteId.notes.tsx",
      "parent": "/_layout/favorites"
    }
  }
}
ROUTE_MANIFEST_END */
